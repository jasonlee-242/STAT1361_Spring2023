scale_x_continuous(breaks = 1:24) +
labs(title="Training and Testing MSE vs Number of Predictors", x="Number of Predictors", y="MSE") +
legend("topleft",legend=c("Train MSE", "Test MSE"), col=c("red","blue"),pch=c(20,20))
MSE.df <- data.frame(MSE.train, MSE.test)
colnames(MSE.df) <- c("Train","Test")
ggplot(data=MSE.df, mapping = aes(x=1:24)) +
geom_point(aes(y = MSE.train, color=MSE.train), color = "red") +
geom_point(aes(y = MSE.test, color=MSE.test), color = "blue") +
scale_x_continuous(breaks = 1:24) +
labs(title="Training and Testing MSE vs Number of Predictors", x="Number of Predictors", y="MSE",color="Legend") +
scale_color_manual(values=colors)
MSE.df <- data.frame(MSE.train, MSE.test)
colnames(MSE.df) <- c("Train","Test")
ggplot(data=MSE.df, mapping = aes(x=1:24)) +
geom_point(aes(y = MSE.train, color="Train MSE"), color = "red") +
geom_point(aes(y = MSE.test, color="Test MSE"), color = "blue") +
scale_x_continuous(breaks = 1:24) +
labs(title="Training and Testing MSE vs Number of Predictors", x="Number of Predictors", y="MSE",color="Legend") +
scale_color_manual(values=colors)
MSE.df <- data.frame(MSE.train, MSE.test)
colnames(MSE.df) <- c("Train","Test")
ggplot(data=MSE.df, mapping = aes(x=1:24)) +
geom_point(aes(y = MSE.train, color="Train"), color = "red") +
geom_point(aes(y = MSE.test, color="Test"), color = "blue") +
scale_x_continuous(breaks = 1:24) +
labs(title="Training and Testing MSE vs Number of Predictors", x="Number of Predictors", y="MSE",color="Legend") +
scale_color_manual(values=colors)
MSE.df <- data.frame(MSE.train, MSE.test)
colnames(MSE.df) <- c("Train","Test")
ggplot(data=MSE.df, mapping = aes(x=1:24, color = MSE.df)) +
geom_point(aes(y = MSE.train, color="Train"), color = "red") +
geom_point(aes(y = MSE.test, color="Test"), color = "blue") +
scale_x_continuous(breaks = 1:24) +
labs(title="Training and Testing MSE vs Number of Predictors", x="Number of Predictors", y="MSE",color="Legend") +
scale_color_manual(values=colors)
MSE.df <- data.frame(MSE.train, MSE.test)
colnames(MSE.df) <- c("Train","Test")
ggplot(data=MSE.df, mapping = aes(x=1:24, color = c("Train","Test"))) +
geom_point(aes(y = MSE.train), color = "red") +
geom_point(aes(y = MSE.test), color = "blue") +
scale_x_continuous(breaks = 1:24) +
labs(title="Training and Testing MSE vs Number of Predictors", x="Number of Predictors", y="MSE") +
MSE.df <- data.frame(MSE.train, MSE.test)
MSE.df <- data.frame(MSE.train, MSE.test)
colnames(MSE.df) <- c("Train","Test")
ggplot(data=MSE.df, mapping = aes(x=1:24, color = c("Train","Test"))) +
geom_point(aes(y = MSE.train), color = "red") +
geom_point(aes(y = MSE.test), color = "blue") +
scale_x_continuous(breaks = 1:24, minor_breaks = NULL) +
labs(title="Training and Testing MSE vs Number of Predictors", x="Number of Predictors", y="MSE")
seq(1:24,2)
seq(1:2:24)
seq(1:24:2)
?seq
seq(1,24,2)
seq(1,24,3)
seq(1,24,5)
seq(1,24,6)
seq(1,24,7)
MSE.df
desig <- c(rep("Train",25), rep("Test",25))
MSE.df <- data.frame(desig, cbind(MSE.train, MSE.test))
cbind(MSE.train,MSE.test)
desig <- c(rep("Train",25), rep("Test",25))
MSE.df <- data.frame(desig, rbind(MSE.train, MSE.test))
colnames(MSE.df) <- c("Train","Test")
ggplot(data=MSE.df, mapping = aes(x=1:24, color = desig)) +
geom_point(aes(y = MSE.train), color = "red") +
geom_point(aes(y = MSE.test), color = "blue") +
scale_x_continuous(breaks = 1:24, minor_breaks = NULL) +
labs(title="Training and Testing MSE vs Number of Predictors", x="Number of Predictors", y="MSE")
desig <- c(rep("Train",25), rep("Test",25))
MSE.df <- data.frame(type=desig, num.pred=rep(1:24,2), vals=rbind(MSE.train, MSE.test))
desig
rep(1:24,2)
desig <- c(rep("Train",24), rep("Test",24))
MSE.df <- data.frame(type=desig, num.pred=rep(1:24,2), vals=rbind(MSE.train, MSE.test))
ggplot(data=MSE.df, mapping = aes(x=num.pred, y=vals, color = desig)) +
geom_point() +
scale_x_continuous(breaks = 1:24, minor_breaks = NULL) +
labs(title="Training and Testing MSE vs Number of Predictors", x="Number of Predictors", y="MSE")
rbind(MSE.train,MSE.test)
MSE.train
dim(MSE.train)
c(MSE.train,MSE.test)
desig <- c(rep("Train",24), rep("Test",24))
MSE.df <- data.frame(type=desig, num.pred=rep(1:24,2), vals=c(MSE.train, MSE.test))
ggplot(data=MSE.df, mapping = aes(x=num.pred, y=vals, color = desig)) +
geom_point() +
scale_x_continuous(breaks = 1:24, minor_breaks = NULL) +
labs(title="Training and Testing MSE vs Number of Predictors", x="Number of Predictors", y="MSE")
desig <- c(rep("Training MSE",24), rep("Testing MSE",24))
MSE.df <- data.frame(MSE_type=desig, num.pred=rep(1:24,2), vals=c(MSE.train, MSE.test))
ggplot(data=MSE.df, mapping = aes(x=num.pred, y=vals, color = MSE_type)) +
geom_point() +
scale_x_continuous(breaks = 1:24, minor_breaks = NULL) +
labs(title="Training and Testing MSE vs Number of Predictors", x="Number of Predictors", y="MSE")
desig <- c(rep("Training MSE",24), rep("Testing MSE",24))
MSE.df <- data.frame(MSE_type=desig, num.pred=rep(1:24,2), vals=c(MSE.train, MSE.test))
ggplot(data=MSE.df, mapping = aes(x=num.pred, y=vals, color = MSE_type)) +
geom_point() +
geom_line() +
scale_x_continuous(breaks = 1:24, minor_breaks = NULL) +
labs(title="Training and Testing MSE vs Number of Predictors", x="Number of Predictors", y="MSE")
desig <- c(rep("Training MSE",24), rep("Testing MSE",24))
MSE.df <- data.frame(MSE_type=desig, num.pred=rep(1:24,2), vals=c(MSE.train, MSE.test))
ggplot(data=MSE.df, mapping = aes(x=num.pred, y=vals, color = MSE_type)) +
geom_point() + geom_line() +
scale_x_continuous(breaks = 1:24, minor_breaks = NULL) +
labs(title="Training and Testing MSE vs Number of Predictors", x="Number of Predictors", y="MSE")
ls.model2 <- lm(y~x1+x2)
summary(ls.model2)
ls.x1Model <- lm(y~x1)
summary(ls.x1Model <- lm(y~x1))
ls.x2Model <- lm(y~x2)
summary(ls.x1Model)
ls.x2Model <- lm(y~x2)
summary(ls.x2Model)
summary(ls.x2Model)
set.seed(1)
x <- rnorm(100)
my.sd <- sqrt(0.25) #Standard Deviation is the sqrt of variance
eps <- rnorm(100, sd=my.sd)
y <- -1 + (0.5*x) + eps
y.len <- length(y)
cat("Y length:",y.len,"\nBeta-0: -1\nBeta-1: 0.5")
my.poly.model <- lm(y~x+poly(x,2))
summary(my.poly.model)
my.poly.model <- lm(y~x+I(x,2))
my.poly.model <- lm(y~x+I(x^2))
summary(my.poly.model)
ls.model2
summary(ls.model2)
summary(ls.x1Model)
summary(ls.x2Model)
set.seed(1)
x1 <- runif(100)
x2 <- 0.5 * x1 + rnorm(100) / 10
y <- 2 + 2 * x1 + 0.3 * x2 + rnorm(100)
ls.model2 <- lm(y~x1+x2)
summary(ls.model2)
ls.x1Model <- lm(y~x1)
summary(ls.x1Model)
ls.x2Model <- lm(y~x2)
summary(ls.x2Model)
x1 <- c(x1, 0.1)
x2 <- c(x2, 0.8)
y <- c(y, 6)
ls.model3 <- lm(y~x1+x2)
ls.x1Model2 <- lm(y~x1)
ls.x2Model2 <- lm(y~x2)
my.poly.model <- lm(y~x+I(x^2))
rm(list = ls())
set.seed(1)
x <- rnorm(100)
my.sd <- sqrt(0.25) #Standard Deviation is the sqrt of variance
eps <- rnorm(100, sd=my.sd)
y <- -1 + (0.5*x) + eps
y.len <- length(y)
cat("Y length:",y.len,"\nBeta-0: -1\nBeta-1: 0.5")
ls.model <- lm(y~x)
summary(ls.model)
my.poly.model <- lm(y~x+I(x^2))
summary(my.poly.model)
rm(list = ls())
pairs(Auto)
auto.remove.name <- subset(Auto, select=-c(name))
cor(auto.remove.name)
auto.model <- lm(data=auto.remove.name,mpg~.)
summary(auto.model)
#auto.model <- lm(data=auto.remove.name,mpg~.)
auto.model <- lm(formula = mpg ~ . - name, data = Auto)
summary(auto.model)
auto.model <- lm(data=auto.remove.name,mpg~.)
summary(auto.model)
#Linear model w/o name predictor
#auto.model <- lm(data=auto.remove.name,mpg~.)
auto.model <- lm(formula = mpg ~ . - name, data = Auto)
summary(auto.model)
#Linear model w/o name predictor
auto.model <- lm(data=auto.remove.name,mpg~.)
summary(auto.model)
rm(list=ls())
carseats.model <- lm(data=Carseats,Sales~Price+Urban+US)
summary(carseats.model)
View(Carseats)
?Carsetas
?Carseats
sqrt(0.15)
sqrt(0.1)
#Repeat a-c
x2 <- rnorm(100)
eps2 <- rnorm(100, sd=sqrt(0.1)) #Reduce variance to 0.10
y2 <- -1 + (0.5*x2) + eps2
y2.len <- length(y2)
cat("Y length:",y2.len,"\nBeta-0: -1\nBeta-1: 0.5")
#Repeat a-c
x3 <- rnorm(100)
eps3 <- rnorm(100, sd=sqrt(0.5)) #Increase variance to 0.5
y3 <- -1 + (0.5*x3) + eps3
y3.len <- length(y3)
cat("Y length:",y3.len,"\nBeta-0: -1\nBeta-1: 0.5")
ls()
rm(list = ls())
set.seed(1)
x <- rnorm(100)
my.sd <- sqrt(0.25) #Standard Deviation is the sqrt of variance
eps <- rnorm(100, sd=my.sd)
y <- -1 + (0.5*x) + eps
y.len <- length(y)
cat("Y length:",y.len,"\nBeta-0: -1\nBeta-1: 0.5")
plot(x, y, pch=20)
ls.model <- lm(y~x)
plot(x, y, pch=20)
abline(ls.model, col = "blue")
abline(a=-1,b=0.5, col = "red")
legend("topleft", legend = c("Least-Squares Model", "Population Model"), col=c("blue","red"), lwd=c(1,1))
#Repeat a-c
x2 <- rnorm(100)
eps2 <- rnorm(100, sd=sqrt(0.1)) #Reduce variance to 0.10
y2 <- -1 + (0.5*x2) + eps2
y2.len <- length(y2)
cat("Y length:",y2.len,"\nBeta-0: -1\nBeta-1: 0.5")
#Repeat a-c
x2 <- rnorm(100)
eps2 <- rnorm(100, sd=sqrt(0.1)) #Reduce variance to 0.10
y2 <- -1 + (0.5*x2) + eps2
y2.len <- length(y2)
cat("Y2 length:",y2.len,"\nBeta-0: -1\nBeta-1: 0.5")
#Repeat d
plot(x2, y2, pch=20)
set.seed(1)
#Repeat a-c
x2 <- rnorm(100)
eps2 <- rnorm(100, sd=sqrt(0.1)) #Reduce variance to 0.10
y2 <- -1 + (0.5*x2) + eps2
y2.len <- length(y2)
cat("Y2 length:",y2.len,"\nBeta-0: -1\nBeta-1: 0.5")
#Repeat d
plot(x2, y2, pch=20)
set.seed(1)
rm(list = ls())
set.seed(1)
x <- rnorm(100)
my.sd <- sqrt(0.25) #Standard Deviation is the sqrt of variance
eps <- rnorm(100, sd=my.sd)
y <- -1 + (0.5*x) + eps
y.len <- length(y)
cat("Y length:",y.len,"\nBeta-0: -1\nBeta-1: 0.5")
plot(x, y, pch=20)
ls.model <- lm(y~x)
plot(x, y, pch=20)
abline(ls.model, col = "blue")
abline(a=-1,b=0.5, col = "red")
legend("topleft", legend = c("Least-Squares Model", "Population Model"), col=c("blue","red"), lwd=c(1,1))
#Repeat a-c
x2 <- rnorm(100)
eps2 <- rnorm(100, sd=sqrt(0.1)) #Reduce variance to 0.10
y2 <- -1 + (0.5*x2) + eps2
y2.len <- length(y2)
cat("Y2 length:",y2.len,"\nBeta-0: -1\nBeta-1: 0.5")
#Repeat d
plot(x2, y2, pch=20)
set.seed(1)
#Repeat a-c
x2 <- rnorm(100)
eps2 <- rnorm(100, sd=sqrt(0.1)) #Reduce variance to 0.10
y2 <- -1 + (0.5*x2) + eps2
y2.len <- length(y2)
cat("Y2 length:",y2.len,"\nBeta-0: -1\nBeta-1: 0.5")
#Repeat d
plot(x2, y2, pch=20)
set.seed(1)
#Repeat a-c
x2 <- rnorm(100)
eps2 <- rnorm(100, sd=sqrt(0.1)) #Reduce variance to 0.10
y2 <- -1 + (0.5*x2) + eps2
y2.len <- length(y2)
cat("Y2 length:",y2.len,"\nBeta-0: -1\nBeta-1: 0.5")
#Repeat d
plot(x2, y2, pch=20)
set.seed(1)
#Repeat a-c
x2 <- rnorm(100)
eps2 <- rnorm(100, sd=sqrt(0.1)) #Reduce variance to 0.10
y2 <- -1 + (0.5*x2) + eps2
y2.len <- length(y2)
cat("Y2 length:",y2.len,"\nBeta-0: -1\nBeta-1: 0.5")
#Repeat d
plot(x2, y2, pch=20)
plot(x, y, pch=20)
#Repeat e
ls.model2 <- lm(y2~x2)
summary(ls.model2)
set.seed(1)
#Repeat a-c
x2 <- rnorm(100)
eps2 <- rnorm(100, sd=sqrt(0.1)) #Reduce variance to 0.10
y2 <- -1 + (0.5*x2) + eps2
y2.len <- length(y2)
cat("Y2 length:",y2.len,"\nBeta-0: -1\nBeta-1: 0.5")
#Repeat d
plot(x2, y2, pch=20)
#Repeat e
ls.model2 <- lm(y2~x2)
summary(ls.model2)
#Repeat f
plot(x2, y2, pch=20)
abline(ls.model2, col = "blue")
abline(a=-1,b=0.5, col = "red")
legend("topleft", legend = c("Least-Squares Model (2)", "Population Model (2)"), col=c("blue","red"), lwd=c(1,1))
set.seed(1)
#Repeat a-c
x3 <- rnorm(100)
eps3 <- rnorm(100, sd=sqrt(0.5)) #Increase variance to 0.5
y3 <- -1 + (0.5*x3) + eps3
y3.len <- length(y3)
cat("Y length:",y3.len,"\nBeta-0: -1\nBeta-1: 0.5")
#Repeat d
plot(x3, y3, pch=20)
ls.model3 <- lm(y3~x3)
summary(ls.model3)
plot(x3, y3, pch=20)
abline(ls.model3, col = "blue")
abline(a=-1,b=0.5, col = "red")
legend("topleft", legend = c("Least-Squares Model (3)", "Population Model (3)"), col=c("blue","red"), lwd=c(1,1))
confint(ls.model)
confint(ls.model2)
confint(ls.model3)
rm(list=ls())
carseats.model <- lm(data=Carseats,Sales~Price+Urban+US)
summary(carseats.model)
carseats.model2 <- lm(data=carseats.df, Sales~Price+US)
carseats.model2 <- lm(data=Carseats, Sales~Price+US)
summary(carseats.model2)
confint(carseats.model2)
View(Auto)
interaction.model <- lm(data=Auto, mpg~.*.)
summary(interaction.model)
interaction.model <- lm(data=auto.remove.name, mpg~.*.)
rm(list=ls())
#Scatterplot of all vars from ISLR::Auto dataset
pairs(Auto)
#Remove name + get correlation matrix
auto.remove.name <- subset(Auto, select=-c(name))
cor(auto.remove.name)
#Linear model w/o name predictor
auto.model <- lm(data=auto.remove.name,mpg~.)
interaction.model <- lm(data=auto.remove.name, mpg~.*.)
summary(interaction.model)
summary( lm(formula = mpg ~ . * ., data = Auto[, -9]))
summary( lm(formula = mpg ~ . * ., data = Auto))
interaction.model <- lm(data=auto.remove.name, mpg~.*.)
summary(interaction.model)
log.model <- lm(data=auto.remove.name, mpg~.+log(displacement))
sqrt.model <- lm(data=auto.remove.name, mpg~.+sqrt(year))
sq.model <- lm(data=auto.remove.name, mpg~.+I(weight^2))
summary(log.model)
summary(auto.model)
summary(sqrt.model)
summary(sq.model)
rm(list=ls())
set.seed(1)
x1 <- runif(100)
x2 <- 0.5 * x1 + rnorm(100) / 10
y <- 2 + 2 * x1 + 0.3 * x2 + rnorm(100)
plot(x1,x2,pch=20)
paste("Correlation between x1 and x2: ", cor(x1,x2))
ls.model2 <- lm(y~x1+x2)
ls.x1Model <- lm(y~x1)
ls.x2Model <- lm(y~x2)
#From problem
x1 <- c(x1, 0.1)
x2 <- c(x2, 0.8)
y <- c(y, 6)
ls.model3 <- lm(y~x1+x2)
ls.x1Model2 <- lm(y~x1)
ls.x2Model2 <- lm(y~x2)
rm(list=ls())
#Remove name + get correlation matrix
auto.remove.name <- subset(Auto, select=-c(name))
cor(auto.remove.name)
#Linear model w/o name predictor
auto.model <- lm(data=auto.remove.name,mpg~.)
plot(auto.model)
par(mfrow=c(2,2))
plot(auto.model)
rm(list=ls())
carseats.model <- lm(data=Carseats,Sales~Price+Urban+US)
summary(carseats.model)
carseats.model2 <- lm(data=Carseats, Sales~Price+US)
summary(carseats.model2)
par(nrow=c(2,2))
plot(carseats.model2)
par(mfrow=c(2,2))
plot(carseats.model2)
rm(list=ls())
set.seed(1)
x1 <- runif(100)
x2 <- 0.5 * x1 + rnorm(100) / 10
y <- 2 + 2 * x1 + 0.3 * x2 + rnorm(100)
plot(x1,x2,pch=20)
paste("Correlation between x1 and x2: ", cor(x1,x2))
rm(list=ls())
set.seed(1)
x1 <- runif(100)
x2 <- 0.5 * x1 + rnorm(100) / 10
y <- 2 + 2 * x1 + 0.3 * x2 + rnorm(100)
plot(x1,x2,pch=20)
paste("Correlation between x1 and x2: ", cor(x1,x2))
set.seed(1)
x1 <- runif(100)
x2 <- 0.5 * x1 + rnorm(100) / 10
y <- 2 + 2 * x1 + 0.3 * x2 + rnorm(100)
plot(x1,x2,pch=20)
paste("Correlation between x1 and x2: ", cor(x1,x2))
plot(x1,x2,pch=20)
paste("Correlation between x1 and x2: ", cor(x1,x2))
plot(x1,x2,pch=20)
paste("Correlation between x1 and x2: ", cor(x1,x2))
plot(x1,x2,pch=20)
paste("Correlation between x1 and x2: ", cor(x1,x2))
plot(x1,x2,pch=20)
paste("Correlation between x1 and x2: ", cor(x1,x2))
plot(x1,x2,pch=20)
paste("Correlation between x1 and x2: ", cor(x1,x2))
plot(x1,x2,pch=20)
paste("Correlation between x1 and x2: ", cor(x1,x2))
plot(x1,x2,pch=20)
paste("Correlation between x1 and x2: ", cor(x1,x2))
set.seed(1)
x <- rnorm(100)
my.sd <- sqrt(0.25) #Standard Deviation is the sqrt of variance
eps <- rnorm(100, sd=my.sd)
y <- -1 + (0.5*x) + eps
y.len <- length(y)
cat("Y length:",y.len,"\nBeta-0: -1\nBeta-1: 0.5")
plot(x, y, pch=20)
set.seed(1)
x <- rnorm(100)
my.sd <- sqrt(0.25) #Standard Deviation is the sqrt of variance
eps <- rnorm(100, sd=my.sd)
y <- -1 + (0.5*x) + eps
y.len <- length(y)
cat("Y length:",y.len,"\nBeta-0: -1\nBeta-1: 0.5")
plot(x, y, pch=20)
rm(list=ls())
set.seed(1)
x1 <- runif(100)
x2 <- 0.5 * x1 + rnorm(100) / 10
y <- 2 + 2 * x1 + 0.3 * x2 + rnorm(100)
set.seed(1)
x1 <- runif(100)
x2 <- 0.5 * x1 + rnorm(100) / 10
y <- 2 + 2 * x1 + 0.3 * x2 + rnorm(100)
set.seed(1)
x1 <- runif(100)
x2 <- 0.5 * x1 + rnorm(100) / 10
y <- 2 + 2 * x1 + 0.3 * x2 + rnorm(100)
plot(x1,x2,pch=20)
paste("Correlation between x1 and x2: ", cor(x1,x2))
ls.model2 <- lm(y~x1+x2)
ls.x1Model <- lm(y~x1)
ls.x2Model <- lm(y~x2)
#From problem
x1 <- c(x1, 0.1)
x2 <- c(x2, 0.8)
y <- c(y, 6)
ls.model3 <- lm(y~x1+x2)
ls.x1Model2 <- lm(y~x1)
ls.x2Model2 <- lm(y~x2)
summary(ls.model3)
summary(ls.x1Model2)
summary(ls.x2Model2)
summary(ls.x2Model)
summary(ls.x1Model)
par(mfrow=c(2,2))
plot(ls.model3)
par(mfrow=c(2,2))
plot(ls.x1Model2)
par(mfrow=c(2,2))
plot(ls.x2Model2)
par(mfrow=c(4,3))
plot(ls.model3)
par(mfrow=c(4,2))
plot(ls.x1Model2)
plot(ls.x2Model2)
par(mfrow=c(2,2))
plot(ls.model3)
par(mfrow=c(4,2))
plot(ls.x1Model2)
par(mfrow=c(4,2))
plot(ls.x1Model2)
plot(ls.x2Model2)
ggplot(data=data.frame(x1,x2), mapping = aes(x1,x2))+
geom_point() +
geom_point(c(0.1,0.8), color = "red")
ggplot(data=data.frame(x1,x2), mapping = aes(x1,x2))+
geom_point() +
geom_point(c(0.1,0.8), color = "red")
ggplot(data=data.frame(x1,x2), mapping = aes(x1,x2))+
geom_point() +
geom_point(aes(x=0.1,y=0.8), color = "red")
par(mfrow=c(2,2))
plot(ls.model3)
par(mfrow=c(4,2))
plot(ls.x1Model2)
par(mfrow=c(4,2))
plot(ls.x1Model2)
plot(ls.x2Model2)
par(mfrow=c(2,2))
plot(ls.model3)
