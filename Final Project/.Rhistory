trControl = trainControl(method = "cv", number = 10),
tuneGrid = grid)
devtools::install_github('topepo/caret/pkg/caret')
library(devtools)
install.package(devtools)
install.packages(devtools)
install.packages("devtools")
devtools::install_github('topepo/caret/pkg/caret')
library(caret)
forest.house <- housing.ohe[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
grid <- expand.grid(mtry=c(1,2,3,4,5,6,7), ntree=c(100,250,500,700,950))
# Perform a grid search using cross-validation
model <- train(price~., data = forest.house, method = "rf",
trControl = trainControl(method = "cv", number = 10),
tuneGrid = grid)
remove.packages("caret")
install.packages("caret")
install.packages("caret")
library(caret)
forest.house <- housing.ohe[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
grid <- expand.grid(mtry=c(1,2,3,4,5,6,7), ntree=c(100,250,500,700,950))
# Perform a grid search using cross-validation
model <- train(price~., data = forest.house, method = "rf",
trControl = trainControl(method = "cv", number = 10),
tuneGrid = grid)
forest.house <- housing.ohe[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
grid <- expand.grid(mtry=c(1,2,3,4,5,6,7), ntree=c(100,250,500,700,950))
# Perform a grid search using cross-validation
model <- train(price~., data = forest.house, method = "rf",
trControl = trainControl(method = "cv", number = 5),
tuneGrid = grid)
forest.house <- housing.ohe[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
grid <- expand.grid(ntree = c(100, 250, 500, 700, 950),
mtry = c(1, 2, 3, 4, 5, 6, 7))
model <- train(price ~ ., data = forest.house, method = "rf",
trControl = trainControl(method = "cv", number = 10),
tuneGrid = grid)
forest.house <- housing.ohe[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
ctrl <- trainControl(method = "cv", number = 10, tuneLength = 35)
forest.house <- housing.ohe[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
ctrl <- trainControl(method = "cv", number = 10, search="grid")
model <- train(price ~ ., data = forest.house, method = "rf", trControl = ctrl)
# Extract the optimal hyperparameters
best_mtry <- model$bestTune$mtry
best_ntree <- model$bestTune$ntree
best_mtry
best_ntree
set.seed(50)
numPred <- 13
mean.err <- vector(mode="numeric",length=10)
min.errs <- vector(mode="numeric",length=10)
oob.err <- vector(length=10)
min.oob <- vector(length=10)
for(k in 1:10){
where.val <- sample(1:nrow(housing.ohe),0.2*nrow(housing.ohe),replace=F)
rf.train<-housing.ohe[-where.val,]
rf.val <- housing.ohe[where.val,]
errors <- vector(mode="numeric",length = 7)
oob_errors <- vector(length = 7)
forest.house <- rf.train[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
forest.val <- rf.val[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
for(i in 1:7){
housing.bag<-randomForest(price~.,data = forest.house, ntree=750, mtry = i)
pred.bag <- predict(housing.bag, forest.val[,-1])
errors[i] <- mean((pred.bag - forest.val$price)^2)
oob_errors[i] <- housing.bag$err.rate[nrow(housing.bag$err.rate), "OOB"]
}
mean.err[k] <- mean(errors)
min.errs[k] <- min(errors)
oob.err[k] <- mean(oob_errors)
min.oob[k] <- min(oob_errors)
}
#Uncomment the install line if any packages not on your machine
#install.packages(c("GGally", "ggplot2", "gridExtra","caret","regclass", "leaps","glmnet","randomForest","knitr"))
library(GGally)
library(ggplot2)
library(gridExtra)
library(caret)
library(regclass)
library(leaps)
library(glmnet)
library(randomForest)
library(knitr)
set.seed(50)
numPred <- 13
mean.err <- vector(mode="numeric",length=10)
min.errs <- vector(mode="numeric",length=10)
oob.err <- vector(length=10)
min.oob <- vector(length=10)
for(k in 1:10){
where.val <- sample(1:nrow(housing.ohe),0.2*nrow(housing.ohe),replace=F)
rf.train<-housing.ohe[-where.val,]
rf.val <- housing.ohe[where.val,]
errors <- vector(mode="numeric",length = 7)
oob_errors <- vector(length = 7)
forest.house <- rf.train[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
forest.val <- rf.val[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
for(i in 1:7){
housing.bag<-randomForest(price~.,data = forest.house, ntree=750, mtry = i)
pred.bag <- predict(housing.bag, forest.val[,-1])
errors[i] <- mean((pred.bag - forest.val$price)^2)
oob_errors[i] <- housing.bag$err.rate[nrow(housing.bag$err.rate), "OOB"]
}
mean.err[k] <- mean(errors)
min.errs[k] <- min(errors)
oob.err[k] <- mean(oob_errors)
min.oob[k] <- min(oob_errors)
}
set.seed(50)
numPred <- 13
mean.err <- vector(mode="numeric",length=10)
min.errs <- vector(mode="numeric",length=10)
oob.err <- vector(mode="numeric",length=10)
min.oob <- vector(mode="numeric",length=10)
for(k in 1:10){
where.val <- sample(1:nrow(housing.ohe),0.2*nrow(housing.ohe),replace=F)
rf.train<-housing.ohe[-where.val,]
rf.val <- housing.ohe[where.val,]
errors <- vector(mode="numeric",length = 7)
oob_errors <- vector(mode="numeric",length = 7)
forest.house <- rf.train[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
forest.val <- rf.val[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
for(i in 1:7){
housing.bag<-randomForest(price~.,data = forest.house, ntree=750, mtry = i)
pred.bag <- predict(housing.bag, forest.val[,-1])
errors[i] <- mean((pred.bag - forest.val$price)^2)
oob_errors[i] <- housing.bag$err.rate[nrow(housing.bag$err.rate), "OOB"]
}
mean.err[k] <- mean(errors)
min.errs[k] <- min(errors)
oob.err[k] <- mean(oob_errors)
min.oob[k] <- min(oob_errors)
}
set.seed(50)
numPred <- 13
mean.err <- vector(mode="numeric",length=10)
min.errs <- vector(mode="numeric",length=10)
oob.err <- vector(mode="numeric",length=10)
min.oob <- vector(mode="numeric",length=10)
for(k in 1:10){
where.val <- sample(1:nrow(housing.ohe),0.2*nrow(housing.ohe),replace=F)
rf.train<-housing.ohe[-where.val,]
rf.val <- housing.ohe[where.val,]
errors <- vector(mode="numeric",length = 7)
oob_errors <- vector(mode="numeric",length = 7)
forest.house <- rf.train[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
forest.val <- rf.val[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
for(i in 1:7){
housing.bag<-randomForest(price~.,data = forest.house, ntree=750, mtry = i)
pred.bag <- predict(housing.bag, forest.val[,-1])
errors[i] <- mean((pred.bag - forest.val$price)^2)
oob_errors[i] <- 1 - housing.bag$err.rate[nrow(housing.bag$err.rate), "OOB"]
}
mean.err[k] <- mean(errors)
min.errs[k] <- min(errors)
oob.err[k] <- mean(oob_errors)
min.oob[k] <- min(oob_errors)
}
set.seed(50)
numPred <- 13
mean.err <- vector(mode="numeric",length=10)
min.errs <- vector(mode="numeric",length=10)
for(k in 1:10){
where.val <- sample(1:nrow(housing.ohe),0.2*nrow(housing.ohe),replace=F)
rf.train<-housing.ohe[-where.val,]
rf.val <- housing.ohe[where.val,]
errors <- vector(mode="numeric",length = 7)
forest.house <- rf.train[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
forest.val <- rf.val[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
for(i in 1:7){
housing.bag<-randomForest(price~.,data = forest.house, ntree=750, mtry = i)
pred.bag <- predict(housing.bag, forest.val[,-1])
errors[i] <- mean((pred.bag - forest.val$price)^2)
}
mean.err[k] <- mean(errors)
min.errs[k] <- min(errors)
}
mean.err[which.min(mean.err)]
min.errs[which.min(min.errs)]
set.seed(50)
numPred <- 13
mean.err <- vector(mode="numeric",length=10)
min.errs <- vector(mode="numeric",length=10)
for(k in 1:10){
where.val <- sample(1:nrow(housing.ohe),0.2*nrow(housing.ohe),replace=F)
rf.train<-housing.ohe[-where.val,]
rf.val <- housing.ohe[where.val,]
errors <- vector(mode="numeric",length = 7)
forest.house <- rf.train[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
forest.val <- rf.val[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
for(i in 1:7){
housing.bag<-randomForest(price~.,data = forest.house, ntree=500, mtry = i)
pred.bag <- predict(housing.bag, forest.val[,-1])
errors[i] <- mean((pred.bag - forest.val$price)^2)
}
mean.err[k] <- mean(errors)
min.errs[k] <- min(errors)
}
mean.err[which.min(mean.err)]
min.errs[which.min(min.errs)]
set.seed(50)
numPred <- 13
mean.err <- vector(mode="numeric",length=10)
min.errs <- vector(mode="numeric",length=10)
for(k in 1:10){
where.val <- sample(1:nrow(housing.ohe),0.2*nrow(housing.ohe),replace=F)
rf.train<-housing.ohe[-where.val,]
rf.val <- housing.ohe[where.val,]
errors <- vector(mode="numeric",length = 7)
forest.house <- rf.train[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
forest.val <- rf.val[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
for(i in 1:7){
housing.bag<-randomForest(price~.,data = forest.house, ntree=100, mtry = i)
pred.bag <- predict(housing.bag, forest.val[,-1])
errors[i] <- mean((pred.bag - forest.val$price)^2)
}
mean.err[k] <- mean(errors)
min.errs[k] <- min(errors)
}
mean.err[which.min(mean.err)]
min.errs[which.min(min.errs)]
which.min(mean.err)
mean.err[which.min(mean.err)]
min.errs[which.min(min.errs)]
par(cfrow=c(2,2))
plot(1:7, mean.err, xlab="mtry",ylab="MSE")
mean.err[which.min(mean.err)]
min.errs[which.min(min.errs)]
par(mfrow=c(2,2))
plot(1:7, mean.err, xlab="mtry",ylab="MSE")
rf.mse
set.seed(50)
numPred <- 13
mean.err <- vector(mode="numeric",length=10)
min.errs <- vector(mode="numeric",length=10)
par(mfrow=c(5,2))
for(k in 1:10){
where.val <- sample(1:nrow(housing.ohe),0.2*nrow(housing.ohe),replace=F)
rf.train<-housing.ohe[-where.val,]
rf.val <- housing.ohe[where.val,]
errors <- vector(mode="numeric",length = 7)
forest.house <- rf.train[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
forest.val <- rf.val[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
for(i in 1:7){
housing.bag<-randomForest(price~.,data = forest.house, ntree=500, mtry = i)
pred.bag <- predict(housing.bag, forest.val[,-1])
errors[i] <- mean((pred.bag - forest.val$price)^2)
}
plot(1:7, errors, xlab="mtry", ylab="MSE")
mean.err[k] <- mean(errors)
min.errs[k] <- min(errors)
}
set.seed(50)
numPred <- 13
mean.err <- vector(mode="numeric",length=10)
min.errs <- vector(mode="numeric",length=10)
par(mfrow=c(4,2))
for(k in 1:10){
where.val <- sample(1:nrow(housing.ohe),0.2*nrow(housing.ohe),replace=F)
rf.train<-housing.ohe[-where.val,]
rf.val <- housing.ohe[where.val,]
errors <- vector(mode="numeric",length = 7)
forest.house <- rf.train[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
forest.val <- rf.val[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
for(i in 1:7){
housing.bag<-randomForest(price~.,data = forest.house, ntree=500, mtry = i)
pred.bag <- predict(housing.bag, forest.val[,-1])
errors[i] <- mean((pred.bag - forest.val$price)^2)
}
plot(1:7, errors, xlab="mtry", ylab="MSE")
mean.err[k] <- mean(errors)
min.errs[k] <- min(errors)
}
mean.err[which.min(mean.err)]
mode(min.errs)
mean.err[which.min(mean.err)]
table(min.errs)
set.seed(50)
numPred <- 13
mean.err <- vector(mode="numeric",length=10)
min.errs <- vector(mode="numeric",length=10)
which.mtry <- vector(mode="numeric",length=10)
par(mfrow=c(4,2))
for(k in 1:10){
where.val <- sample(1:nrow(housing.ohe),0.2*nrow(housing.ohe),replace=F)
rf.train<-housing.ohe[-where.val,]
rf.val <- housing.ohe[where.val,]
errors <- vector(mode="numeric",length = 7)
forest.house <- rf.train[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
forest.val <- rf.val[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
for(i in 1:7){
housing.bag<-randomForest(price~.,data = forest.house, ntree=500, mtry = i)
pred.bag <- predict(housing.bag, forest.val[,-1])
errors[i] <- mean((pred.bag - forest.val$price)^2)
}
plot(1:7, errors, xlab="mtry", ylab="MSE")
mean.err[k] <- mean(errors)
min.errs[k] <- min(errors)
which.mtry[k] <- which.min(errors)
}
mean.err[which.min(mean.err)]
table(which.mtry)
set.seed(50)
numPred <- 13
mean.err <- vector(mode="numeric",length=10)
min.errs <- vector(mode="numeric",length=10)
which.mtry <- vector(mode="numeric",length=10)
par(mfrow=c(4,2))
for(k in 1:10){
where.val <- sample(1:nrow(housing.ohe),0.2*nrow(housing.ohe),replace=F)
rf.train<-housing.ohe[-where.val,]
rf.val <- housing.ohe[where.val,]
errors <- vector(mode="numeric",length = 7)
forest.house <- rf.train[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
forest.val <- rf.val[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
for(i in 1:7){
housing.bag<-randomForest(price~.,data = forest.house, ntree=500, mtry = i)
pred.bag <- predict(housing.bag, forest.val[,-1])
errors[i] <- mean((pred.bag - forest.val$price)^2)
}
plot(1:7, errors, xlab="mtry", ylab="MSE")
mean.err[k] <- mean(errors)
min.errs[k] <- min(errors)
which.mtry[k] <- which.min(errors)
}
set.seed(50)
numPred <- 13
mean.err <- vector(mode="numeric",length=10)
min.errs <- vector(mode="numeric",length=10)
which.mtry <- vector(mode="numeric",length=10)
par(mfrow=c(4,2))
for(k in 1:10){
where.val <- sample(1:nrow(housing.ohe),0.2*nrow(housing.ohe),replace=F)
rf.train<-housing.ohe[-where.val,]
rf.val <- housing.ohe[where.val,]
errors <- vector(mode="numeric",length = 7)
forest.house <- rf.train[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
forest.val <- rf.val[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
for(i in 1:7){
housing.bag<-randomForest(price~.,data = forest.house, ntree=500, mtry = i)
pred.bag <- predict(housing.bag, forest.val[,-1])
errors[i] <- mean((pred.bag - forest.val$price)^2)
}
#plot(1:7, errors, xlab="mtry", ylab="MSE")
mean.err[k] <- mean(errors)
min.errs[k] <- min(errors)
which.mtry[k] <- which.min(errors)
}
mean.err[which.min(mean.err)]
table(which.mtry)
ohe.test<-dummyVars("~.",data=housing.test.df[,-c(1,2)])
test.id <- housing.test.df[,1]
test.ohe <- data.frame(test.id, predict(ohe.test,housing.test.df))
final.forest.house <- housing.ohe[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
final.forest.test <- test.ohe[,c("descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
final.bag <- randomForest(price~.,data=final.forest.house, ntree = 500, mtry = 4)
final.pred <- predict(final.bag, final.forest.test)
final.predictions <- data.frame(id = test.id, predictedPrice = final.pred)
View(final.predictions)
range(housing.train.df$price)
ohe.test<-dummyVars("~.",data=housing.test.df[,-c(1,2)])
test.id <- housing.test.df[,1]
test.ohe <- data.frame(test.id, predict(ohe.test,housing.test.df))
final.forest.house <- housing.ohe[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
final.forest.test <- test.ohe[,c("descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
final.bag <- randomForest(price~.,data=final.forest.house, ntree = 500, mtry = 4)
final.pred <- predict(final.bag, final.forest.test)
final.predictions <- data.frame(id = test.id, price = final.pred)
ohe.test<-dummyVars("~.",data=housing.test.df[,-c(1,2)])
test.id <- housing.test.df[,1]
test.ohe <- data.frame(test.id, predict(ohe.test,housing.test.df))
final.forest.house <- housing.ohe[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
final.forest.test <- test.ohe[,c("descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
final.bag <- randomForest(price~.,data=final.forest.house, ntree = 500, mtry = 4)
final.pred <- predict(final.bag, final.forest.test)
final.predictions <- data.frame(id = test.id, price = final.pred)
range(final.predictions$price)
hist(final.predictions$price)
hist(final.predictions$price)
hist(final.predictions$price)
hist(housing.train.df$price)
sum(final.predictions$price <= 50000)
sum(final.predictions$price <= 500000)
sum(final.predictions$price > 500000 & final.predictions$price <= 1000000)
259/300
27/300
sum(housing.train.df$price <= 500000)
598/700
par(mfrow=c(1,2))
hist(housing.train.df$price)
hist(final.predictions$price)
par(mfrow=c(1,2))
hist(housing.train.df$price, main="Training Dist.", xlab="Price")
hist(final.predictions$price, main = "Test Dist.", xlab="Predicted Price")
write.csv(mydf, file = "testing_predictions_Lee_Jason_JYL26.csv", row.names = TRUE)
write.csv(final.predictions, file = "testing_predictions_Lee_Jason_JYL26.csv", row.names = TRUE)
par(mfrow=c(1,2))
hist(housing.train.df$price, main="Training Dist.", xlab="Price")
hist(final.predictions$price, main = "Test Dist.", xlab="Predicted Price")
set.seed(2023)
ohe.test<-dummyVars("~.",data=housing.test.df[,-c(1,2)])
test.id <- housing.test.df[,1]
test.ohe <- data.frame(test.id, predict(ohe.test,housing.test.df))
final.forest.house <- housing.ohe[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
final.forest.test <- test.ohe[,c("descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
final.bag <- randomForest(price~.,data=final.forest.house, ntree = 500, mtry = 4)
final.pred <- predict(final.bag, final.forest.test)
final.predictions <- data.frame(id = test.id, price = final.pred)
#write.csv(final.predictions, file = "testing_predictions_Lee_Jason_JYL26.csv", row.names = TRUE)
par(mfrow=c(1,2))
hist(housing.train.df$price, main="Training Dist.", xlab="Price")
hist(final.predictions$price, main = "Test Dist.", xlab="Predicted Price")
write.csv(final.predictions, file = "testing_predictions_Lee_Jason_JYL26.csv", row.names = TRUE)
par(mfrow=c(1,2))
hist(housing.train.df$price, main="Training Dist.", xlab="Price")
hist(final.predictions$price, main = "Test Dist.", xlab="Predicted Price")
set.seed(2023)
ohe.test<-dummyVars("~.",data=housing.test.df[,-c(1,2)])
test.id <- housing.test.df[,1]
test.ohe <- data.frame(test.id, predict(ohe.test,housing.test.df))
final.forest.house <- housing.ohe[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
final.forest.test <- test.ohe[,c("descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
final.bag <- randomForest(price~.,data=final.forest.house, ntree = 500, mtry = 4)
final.pred <- predict(final.bag, final.forest.test)
final.predictions <- data.frame(id = test.id, price = final.pred)
range(final.predictions$price)
sum(housing.train.df$price < 50000)
85/700
sum(final.predictions$price < 50000)
3/300
set.seed(2023)
ohe.test<-dummyVars("~.",data=housing.test.df[,-c(1,2)])
test.id <- housing.test.df[,1]
test.ohe <- data.frame(test.id, predict(ohe.test,housing.test.df))
final.forest.house <- housing.ohe[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
final.forest.test <- test.ohe[,c("descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
final.bag <- randomForest(price~.,data=final.forest.house, ntree = 500, mtry = 4)
final.pred <- round(predict(final.bag, final.forest.test),2)
final.predictions <- data.frame(id = test.id, price = final.pred)
write.csv(final.predictions, file = "testing_predictions_Lee_Jason_JYL26.csv", row.names = TRUE)
par(mfrow=c(1,2))
hist(housing.train.df$price, main="Training Dist.", xlab="Price")
hist(final.predictions$price, main = "Test Dist.", xlab="Predicted Price")
knitr::opts_chunk$set(echo = TRUE)
#Uncomment the install line if any packages not on your machine
#install.packages(c("GGally", "ggplot2", "gridExtra","caret","regclass", "leaps","glmnet","randomForest","knitr"))
library(GGally)
library(ggplot2)
library(gridExtra)
library(caret)
library(regclass)
library(leaps)
library(glmnet)
library(randomForest)
library(knitr)
#Load Training and Test data
housing.train.df <- read.csv("train.csv", header=T, sep = ",")
housing.test.df <- read.csv("test.csv",header=T,sep=",")
set.seed(99)
numPred <- 13 #The 13 predictors chosen from the lasso model
errors <- vector(mode="numeric",length = 7)
#New train + validation datasets for random forest using the lasso predictors
forest.house <- housing.no.id[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
set.seed(1)
#Training House IDs
id <- housing.train.df[,1]
#80/20 split of training data -> validation set
num.obs <- nrow(housing.train.df)
vald.loc <- sample(1:num.obs, 0.2*num.obs, replace=FALSE)
#One-hot encoding of categorical variables
ohe<-dummyVars("~.",data=housing.train.df[,-1])
housing.ohe <- data.frame(id, predict(ohe,housing.train.df))
#Split data into validation set + training
housing.val <- housing.ohe[vald.loc,]
housing.train <- housing.ohe[-vald.loc,]
#check for correct 80/20 split
if(nrow(housing.val) != 0.2*num.obs){
cat("Validation set generated incorrectly")
}
set.seed(99)
numPred <- 13 #The 13 predictors chosen from the lasso model
errors <- vector(mode="numeric",length = 7)
#New train + validation datasets for random forest using the lasso predictors
forest.house <- housing.no.id[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
#Training dataset w/ no ID column
housing.no.id <- housing.train[,-1]
#Linear model of all variables, no modifications (besides one-hot encoding)
my.model1 <- lm(price~., data=housing.no.id)
summary(my.model1) #model summary
set.seed(99)
numPred <- 13 #The 13 predictors chosen from the lasso model
errors <- vector(mode="numeric",length = 7)
#New train + validation datasets for random forest using the lasso predictors
forest.house <- housing.no.id[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
forest.val <- housing.val[,c("price","descROWHOUSE","numstories","yearbuilt","exteriorfinishBrick","exteriorfinishConcrete","rooftypeROLL","rooftypeSHINGLE","basement","bathrooms","sqft", "lotarea","zipcode","AvgIncome")]
#Tuning mtry values up to half of numPred and save the MSE at each value, keep ntree at default 500
for(i in 1:7){
housing.bag<-randomForest(price~.,data = forest.house, mtry = i)
pred.bag <- predict(housing.bag, forest.val[,-1]) #RF Prediction
errors[i] <- mean((pred.bag - forest.val$price)^2) #MSE
}
rf.mse <- errors[which.min(errors)]
rf.mse
#Check variable importance from the predictors
var_imp <- importance(randomForest(price~.,data=forest.house,mtry=2))
var_imp
#Do the same thing as above, but use the full model (not lasso)
set.seed(99)
numPred.full <- 25
errors.full <- vector(mode="numeric", length=numPred.full)
forest.house.full <- housing.NODEP
sqrt(3.6*10^11)
