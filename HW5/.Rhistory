train.mat<-model.matrix(res~.,data=train.prob4)
set.seed(1)
rand.name <- matrix(rnorm(1000), 100, 10)
beta <- matrix(c(rep(1,5), rep(0,5)),10,1)
error <- rnorm(100,0,0.5)
res <- rand.name%*%beta+error
train.prob4 <- data.frame(rand.name, res)
set.seed(2)
rand.name2 <- matrix(rnorm(10000), 1000, 10)
beta2 <- matrix(c(rep(1,5), rep(0,5)),10,1)
error2 <- rnorm(1000,0,0.5)
res2 <- rand.name2%*%beta2+error2
test.prob4 <- data.frame(rand.name2, res2)
train.mat<-model.matrix(res~.,data=train.prob4)
test.mat<-model.matrix(res2~.,data=test.prob4)
grid<-10^seq(10,-2,length=100)
lasso.p4<-glmnet(train.mat,train$res,alpha=1,lambda=grid)
train.mat<-model.matrix(res~.,data=train.prob4)
test.mat<-model.matrix(res2~.,data=test.prob4)
grid<-10^seq(10,-2,length=100)
lasso.p4<-glmnet(train.mat,train.prob4$res,alpha=1,lambda=grid)
cv.lasso<-cv.glmnet(train.mat,train.prob4$res,alpha=1,lambda=grid)
bestlam<-cv.lasso$lambda.min
pred.lasso<-predict(lasso.p4,s=bestlam,newx =test.mat)
err.lasso.1 <- mean((test$res2-pred.lasso)^2)
train.mat<-model.matrix(res~.,data=train.prob4)
test.mat<-model.matrix(res2~.,data=test.prob4)
grid<-10^seq(10,-2,length=100)
lasso.p4<-glmnet(train.mat,train.prob4$res,alpha=1,lambda=grid)
cv.lasso<-cv.glmnet(train.mat,train.prob4$res,alpha=1,lambda=grid)
bestlam<-cv.lasso$lambda.min
pred.lasso<-predict(lasso.p4,s=bestlam,newx =test.mat)
err.lasso.1 <- mean((test.prob4$res2-pred.lasso)^2)
train.mat<-model.matrix(res~.,data=train.prob4)
test.mat<-model.matrix(res2~.,data=test.prob4)
grid<-10^seq(10,-2,length=100)
lasso.p4<-glmnet(train.mat,train.prob4$res,alpha=1,lambda=grid)
cv.lasso<-cv.glmnet(train.mat,train.prob4$res,alpha=1,lambda=grid)
bestlam<-cv.lasso$lambda.min
pred.lasso<-predict(lasso.p4,s=bestlam,newx =test.mat)
err.lasso.1 <- mean((test.prob4$res2-pred.lasso)^2)
err.lasso.1
lasso.coef <- predict(lasso.p4,s=bestlam,type="coefficients")
lasso.ceof[lasso.coef != 0]
lasso.coef <- predict(lasso.p4,s=bestlam,type="coefficients")
lasso.coef[lasso.coef != 0]
lasso.coef <- predict(lasso.p4,s=bestlam,type="coefficients")
lasso.coef
lasso.coef[lasso.coef != 0]
library(ISLR2)
library(glmnet)
library(pls)
library(leaps)
set.seed(1)
rand.name <- matrix(rnorm(1000), 100, 10)
beta <- matrix(c(rep(1,5), rep(0,5)),10,1)
error <- rnorm(100,0,0.5)
res <- rand.name%*%beta+error
train.prob4 <- data.frame(rand.name, res)
set.seed(2)
rand.name2 <- matrix(rnorm(10000), 1000, 10)
beta2 <- matrix(c(rep(1,5), rep(0,5)),10,1)
error2 <- rnorm(1000,0,0.5)
res <- rand.name2%*%beta2+error2
test.prob4 <- data.frame(rand.name2, res)
train.mat<-model.matrix(res~.,data=train.prob4)
test.mat<-model.matrix(res2~.,data=test.prob4)
train.mat<-model.matrix(res~.,data=train.prob4)
test.mat<-model.matrix(res~.,data=test.prob4)
grid<-10^seq(10,-2,length=100)
lasso.p4<-glmnet(train.mat,train.prob4$res,alpha=1,lambda=grid)
cv.lasso<-cv.glmnet(train.mat,train.prob4$res,alpha=1,lambda=grid)
bestlam<-cv.lasso$lambda.min
pred.lasso<-predict(lasso.p4,s=bestlam,newx =test.mat)
err.lasso.1 <- mean((test.prob4$res-pred.lasso)^2)
err.lasso.1
lasso.coef <- predict(lasso.p4,s=bestlam,type="coefficients")
lasso.coef
lasso.coef[lasso.coef != 0]
my.lm <- lm(res~X1+X2+X3+X4+X5+X6+X9, data=train.prob4)
lm.pred <- predict(my.lm, test.prob4)
mean(test.prob4$res)
my.lm <- lm(res~X1+X2+X3+X4+X5+X6+X9, data=train.prob4)
lm.pred <- predict(my.lm, test.prob4)
mean((test.prob4$res-lm.pred)^2)
which(lasso.coef != 0)
lasso.ceof
lasso.coef
my.lm(res~lasso.coef, data=train.prob4)
lm(res~lasso.coef, data=train.prob4)
rownames(lasso.coef)
lm(res~rownames(lasso.coef)[-1:2], data = train.prob4)
rownames(lasso.coef)[-which(lasso.coef == 0)]
rownames(lasso.coef)[-c(1,which(lasso.coef == 0))]
lm(res~rownames(lasso.coef)[-c(1,which(lasso.coef == 0))], data=train.prob4)
which(lasso.coef == 0)
dim(lasso.coef)
lasso.coef <- predict(lasso.p4,s=bestlam,type="coefficients")
lasso.coef
lasso.coef[lasso.coef != 0]
lasso.coef != 0
lasso.coef[lasso.coef != 0]
which(lasso.coef == 0) -2
which(lasso.coef == 0) -1
which(lasso.coef == 0) -2 [-1]
(which(lasso.coef == 0)-2)[-1]
err.lasso <- vector(mode="numeric", length = 1000)
err.ols <- vector(mode="numeric", length = 1000)
for(i in 1:1000){
rand.name <- matrix(rnorm(1000), 100, 10)
beta <- matrix(c(rep(1,5), rep(0,5)),10,1)
error <- rnorm(100,0,0.5)
res <- rand.name%*%beta+error
train.prob4 <- data.frame(rand.name, res)
train.mat<-model.matrix(res~.,data=train.prob4)
lasso.p4<-glmnet(train.mat,train.prob4$res,alpha=1,lambda=grid)
cv.lasso<-cv.glmnet(train.mat,train.prob4$res,alpha=1,lambda=grid)
bestlam<-cv.lasso$lambda.min
pred.lasso<-predict(lasso.p4,s=bestlam,newx=test.mat)
err.lasso[i] <- mean((test.prob4$res-pred.lasso)^2)
lasso.coef <- predict(lasso.p4,s=bestlam,type="coefficients")
train.prob4 <- train.prob4[,-c((which(lasso.coef == 0) -2)[-1])]
my.lm <- lm(res~., data=train.prob4)
lm.pred <- predict(my.lm, test.prob4)
err.ols[i] <- mean((test.prob4$res-lm.pred)^2)
}
err.lasso <- vector(mode="numeric", length = 1000)
err.ols <- vector(mode="numeric", length = 1000)
for(i in 1:1000){
rand.name <- matrix(rnorm(1000), 100, 10)
beta <- matrix(c(rep(1,5), rep(0,5)),10,1)
error <- rnorm(100,0,0.5)
res <- rand.name%*%beta+error
train.prob4 <- data.frame(rand.name, res)
train.mat<-model.matrix(res~.,data=train.prob4)
lasso.p4<-glmnet(train.mat,train.prob4$res,alpha=1,lambda=grid)
cv.lasso<-cv.glmnet(train.mat,train.prob4$res,alpha=1,lambda=grid)
bestlam<-cv.lasso$lambda.min
pred.lasso<-predict(lasso.p4,s=bestlam,newx=test.mat)
err.lasso[i] <- mean((test.prob4$res-pred.lasso)^2)
lasso.coef <- predict(lasso.p4,s=bestlam,type="coefficients")
train.prob4 <- train.prob4[,-c((which(lasso.coef == 0) -2)[-1])]
my.lm <- lm(res~., data=train.prob4)
lm.pred <- predict(my.lm, test.prob4)
err.ols[i] <- mean((test.prob4$res-lm.pred)^2)
}
train.prob4 <- train.prob4[, -c((which(lasso.coef == 0)-2)[-1])]
train.prob4
train.prob4
set.seed(1)
rand.name <- matrix(rnorm(1000), 100, 10)
beta <- matrix(c(rep(1,5), rep(0,5)),10,1)
error <- rnorm(100,0,0.5)
res <- rand.name%*%beta+error
train.prob4 <- data.frame(rand.name, res)
set.seed(2)
rand.name2 <- matrix(rnorm(10000), 1000, 10)
beta2 <- matrix(c(rep(1,5), rep(0,5)),10,1)
error2 <- rnorm(1000,0,0.5)
res <- rand.name2%*%beta2+error2
test.prob4 <- data.frame(rand.name2, res)
train.mat<-model.matrix(res~.,data=train.prob4)
test.mat<-model.matrix(res~.,data=test.prob4)
grid<-10^seq(10,-2,length=100)
lasso.p4<-glmnet(train.mat,train.prob4$res,alpha=1,lambda=grid)
cv.lasso<-cv.glmnet(train.mat,train.prob4$res,alpha=1,lambda=grid)
bestlam<-cv.lasso$lambda.min
pred.lasso<-predict(lasso.p4,s=bestlam,newx =test.mat)
err.lasso.1 <- mean((test.prob4$res-pred.lasso)^2)
err.lasso.1
lasso.coef <- predict(lasso.p4,s=bestlam,type="coefficients")
lasso.coef
lasso.coef[lasso.coef != 0]
my.lm <- lm(res~X1+X2+X3+X4+X5+X6+X9, data=train.prob4)
lm.pred <- predict(my.lm, test.prob4)
err.ols.1 <- mean((test.prob4$res-lm.pred)^2)
train.prob4 <- train.prob4[, -c((which(lasso.coef == 0)-2)[-1])]
train.prob4
err.lasso <- vector(mode="numeric", length = 1000)
err.ols <- vector(mode="numeric", length = 1000)
for(i in 1:1000){
rand.name <- matrix(rnorm(1000), 100, 10)
beta <- matrix(c(rep(1,5), rep(0,5)),10,1)
error <- rnorm(100,0,0.5)
res <- rand.name%*%beta+error
train.prob4 <- data.frame(rand.name, res)
train.mat<-model.matrix(res~.,data=train.prob4)
lasso.p4<-glmnet(train.mat,train.prob4$res,alpha=1,lambda=grid)
cv.lasso<-cv.glmnet(train.mat,train.prob4$res,alpha=1,lambda=grid)
bestlam<-cv.lasso$lambda.min
pred.lasso<-predict(lasso.p4,s=bestlam,newx=test.mat)
err.lasso[i] <- mean((test.prob4$res-pred.lasso)^2)
lasso.coef <- predict(lasso.p4,s=bestlam,type="coefficients")
train.prob4 <- train.prob4[,-c((which(lasso.coef == 0) -2)[-1])]
my.lm <- lm(res~., data=train.prob4)
lm.pred <- predict(my.lm, test.prob4)
err.ols[i] <- mean((test.prob4$res-lm.pred)^2)
}
err.lasso <- vector(mode="numeric", length = 1000)
err.ols <- vector(mode="numeric", length = 1000)
for(i in 1:1000){
rand.name <- matrix(rnorm(1000), 100, 10)
beta <- matrix(c(rep(1,5), rep(0,5)),10,1)
error <- rnorm(100,0,0.5)
res <- rand.name%*%beta+error
train.prob <- data.frame(rand.name, res)
train.mat<-model.matrix(res~.,data=train.prob4)
lasso.p4<-glmnet(train.mat,train.prob4$res,alpha=1,lambda=grid)
cv.lasso<-cv.glmnet(train.mat,train.prob4$res,alpha=1,lambda=grid)
bestlam<-cv.lasso$lambda.min
pred.lasso<-predict(lasso.p4,s=bestlam,newx=test.mat)
err.lasso[i] <- mean((test.prob4$res-pred.lasso)^2)
lasso.coef <- predict(lasso.p4,s=bestlam,type="coefficients")
train.prob[,-c((which(lasso.coef == 0) -2)[-1])]
my.lm <- lm(res~., data=train.prob)
lm.pred <- predict(my.lm, test.prob4)
err.ols[i] <- mean((test.prob4$res-lm.pred)^2)
}
err.lasso <- vector(mode="numeric", length = 1000)
err.ols <- vector(mode="numeric", length = 1000)
for(i in 1:1000){
rand.name <- matrix(rnorm(1000), 100, 10)
beta <- matrix(c(rep(1,5), rep(0,5)),10,1)
error <- rnorm(100,0,0.5)
res <- rand.name%*%beta+error
train.prob <- data.frame(rand.name, res)
print("Here")
train.mat<-model.matrix(res~.,data=train.prob4)
lasso.p4<-glmnet(train.mat,train.prob4$res,alpha=1,lambda=grid)
cv.lasso<-cv.glmnet(train.mat,train.prob4$res,alpha=1,lambda=grid)
bestlam<-cv.lasso$lambda.min
pred.lasso<-predict(lasso.p4,s=bestlam,newx=test.mat)
err.lasso[i] <- mean((test.prob4$res-pred.lasso)^2)
lasso.coef <- predict(lasso.p4,s=bestlam,type="coefficients")
print("Here2"
)
train.prob[,-c((which(lasso.coef == 0) -2)[-1])]
my.lm <- lm(res~., data=train.prob)
lm.pred <- predict(my.lm, test.prob4)
err.ols[i] <- mean((test.prob4$res-lm.pred)^2)
}
err.lasso <- vector(mode="numeric", length = 1000)
err.ols <- vector(mode="numeric", length = 1000)
for(i in 1:1000){
rand.name <- matrix(rnorm(1000), 100, 10)
beta <- matrix(c(rep(1,5), rep(0,5)),10,1)
error <- rnorm(100,0,0.5)
res <- rand.name%*%beta+error
train.prob <- data.frame(rand.name, res)
print("Here")
train.mat<-model.matrix(res~.,data=train.prob)
lasso.p4<-glmnet(train.mat,train.prob4$res,alpha=1,lambda=grid)
cv.lasso<-cv.glmnet(train.mat,train.prob4$res,alpha=1,lambda=grid)
bestlam<-cv.lasso$lambda.min
pred.lasso<-predict(lasso.p4,s=bestlam,newx=test.mat)
err.lasso[i] <- mean((test.prob4$res-pred.lasso)^2)
lasso.coef <- predict(lasso.p4,s=bestlam,type="coefficients")
print("Here2"
)
train.prob[,-c((which(lasso.coef == 0) -2)[-1])]
my.lm <- lm(res~., data=train.prob)
lm.pred <- predict(my.lm, test.prob4)
err.ols[i] <- mean((test.prob4$res-lm.pred)^2)
}
err.lasso <- vector(mode="numeric", length = 1000)
err.ols <- vector(mode="numeric", length = 1000)
for(i in 1:1000){
rand.name <- matrix(rnorm(1000), 100, 10)
beta <- matrix(c(rep(1,5), rep(0,5)),10,1)
error <- rnorm(100,0,0.5)
res <- rand.name%*%beta+error
train.prob <- data.frame(rand.name, res)
print("Here")
train.mat<-model.matrix(res~.,data=train.prob)
lasso.p4<-glmnet(train.mat,train.prob$res,alpha=1,lambda=grid)
cv.lasso<-cv.glmnet(train.mat,train.prob4$res,alpha=1,lambda=grid)
bestlam<-cv.lasso$lambda.min
pred.lasso<-predict(lasso.p4,s=bestlam,newx=test.mat)
err.lasso[i] <- mean((test.prob4$res-pred.lasso)^2)
lasso.coef <- predict(lasso.p4,s=bestlam,type="coefficients")
print("Here2"
)
train.prob[,-c((which(lasso.coef == 0) -2)[-1])]
my.lm <- lm(res~., data=train.prob)
lm.pred <- predict(my.lm, test.prob4)
err.ols[i] <- mean((test.prob4$res-lm.pred)^2)
}
err.lasso <- vector(mode="numeric", length = 1000)
err.ols <- vector(mode="numeric", length = 1000)
for(i in 1:1000){
rand.name <- matrix(rnorm(1000), 100, 10)
beta <- matrix(c(rep(1,5), rep(0,5)),10,1)
error <- rnorm(100,0,0.5)
res <- rand.name%*%beta+error
train.prob <- data.frame(rand.name, res)
train.mat<-model.matrix(res~.,data=train.prob)
lasso.p4<-glmnet(train.mat,train.prob$res,alpha=1,lambda=grid)
cv.lasso<-cv.glmnet(train.mat,train.prob$res,alpha=1,lambda=grid)
bestlam<-cv.lasso$lambda.min
pred.lasso<-predict(lasso.p4,s=bestlam,newx=test.mat)
err.lasso[i] <- mean((test.prob4$res-pred.lasso)^2)
lasso.coef <- predict(lasso.p4,s=bestlam,type="coefficients")
print("Here2"
)
train.prob[,-c((which(lasso.coef == 0) -2)[-1])]
my.lm <- lm(res~., data=train.prob)
lm.pred <- predict(my.lm, test.prob4)
err.ols[i] <- mean((test.prob4$res-lm.pred)^2)
}
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(ISLR2)
library(glmnet)
library(pls)
library(leaps)
# Chunk 3
data(College)
# Chunk 4
set.seed(1)
train <- sample(c(1:nrow(College)), 0.7*nrow(College), replace=F)
train.set <- College[train,]
test.set <- College[-train,]
# Chunk 5
model1 <- lm(Apps~., data=train.set)
lm.pred <- predict(model1, test.set)
test.mse<-mean((test.set[,2]-lm.pred)^2)
paste("Test MSE:",round(test.mse,3))
# Chunk 6
train.mat<-model.matrix(Apps~.,data=train.set)
test.mat<-model.matrix(Apps~.,data=test.set)
grid<-10^seq(10,-2,length=100)
ridge.mod<-glmnet(train.mat,train.set$Apps,alpha=0,lambda=grid)
set.seed(2)
cv.out<-cv.glmnet(train.mat,train.set$Apps,alpha=0)
bestlam<-cv.out$lambda.min
pred.newridge<-predict(ridge.mod,s=bestlam,newx =test.mat)
mean((test.set$Apps-pred.newridge)^2)
# Chunk 7
lasso.mod<-glmnet(train.mat,train.set$Apps,alpha=1,lambda=grid)
cv.lasso<-cv.glmnet(train.mat,train.set$Apps,alpha=1,lambda=grid)
bestlam.l<-cv.lasso$lambda.min
pred.lasso<-predict(lasso.mod,s=bestlam.l,newx=test.mat)
mean((test.set$Apps-pred.lasso)^2)
lasso.coef <- predict(lasso.mod,s=bestlam.l,type="coefficients")
paste("Non-zero:", length(lasso.coef[lasso.coef != 0]))
# Chunk 8
set.seed(3)
pcr.fit<-pcr(Apps~.,data=train.set,scale=TRUE,validation="CV")
validationplot(pcr.fit,val.type="MSEP")
pcr.pred<-predict(pcr.fit,test.set,ncomp=17)
mean((test.set$Apps-pcr.pred)^2)
print("Cross Validation (plot) shows that number of components = 17 has the lowest MSEP (cv error).")
# Chunk 9
pls.fit<-plsr(Apps~.,data=train.set,scale=TRUE,validation="CV")
validationplot(pls.fit,val.type="MSEP")
pls.pred<-predict(pls.fit,test.set,ncomp=11)
mean((test.set$Apps-pls.pred)^2)
print("CV resulted in ~11 components being the minimum MSEP.")
# Chunk 10
test.avg <- mean(test.set$Apps)
lm.r2 <- 1 - mean((lm.pred - test.set$Apps)^2) / mean((test.avg - test.set$Apps)^2)
ridge.r2 <- 1 - mean((pred.newridge - test.set$Apps)^2) / mean((test.avg - test.set$Apps)^2)
lasso.r2 <- 1 - mean((pred.lasso - test.set$Apps)^2) / mean((test.avg - test.set$Apps)^2)
pcr.r2 <- 1 - mean((pcr.pred - test.set$Apps)^2) / mean((test.avg - test.set$Apps)^2)
pls.r2 <- 1 - mean((pls.pred - test.set$Apps)^2) / mean((test.avg - test.set$Apps)^2)
paste(lm.r2, ridge.r2, lasso.r2, pcr.r2, pls.r2)
# Chunk 11
set.seed(42)
my.mat<-matrix(rnorm(1000*20),1000,20)
b<-matrix(rnorm(20),20,1)
zerod <- sample(1:20, 5)
b[zerod] <- 0
error<-rnorm(1000)
my.res<-my.mat%*%b+error
# Chunk 12
locs <- sample(1:1000, 900)
train.b <- my.mat[locs,]
test.b <- my.mat[-locs,]
train.y <- my.res[locs,]
test.y <- my.res[-locs,]
# Chunk 13
df.train <- data.frame(y = train.y, x = train.b)
regfit.full <- regsubsets(y ~ ., data = df.train, nvmax = 20)
t.mat <- model.matrix(y ~ ., data = df.train, nvmax = 20)
err <- rep(NA, 20)
for (i in 1:20) {
idk <- coef(regfit.full, id = i)
pred <- t.mat[, names(idk)] %*% idk
err[i] <- mean((pred - train.y)^2)
}
plot(err, xlab = "Number of predictors", ylab = "Training MSE", pch = 19, type = "b",col="blue")
# Chunk 14
df.test <- data.frame(y = test.y, x = test.b)
my.test <- model.matrix(y ~ ., data = df.test, nvmax = 20)
err2 <- rep(NA, 20)
for (i in 1:20) {
idk2 <- coef(regfit.full, id = i)
pred <- my.test[, names(idk2)] %*% idk2
err2[i] <- mean((pred - test.y)^2)
}
plot(err2, xlab = "Number of predictors", ylab = "Test MSE", pch = 19, type = "b",col="red")
# Chunk 15
which.min(err2)
min(err2)
# Chunk 16
coef(regfit.full, 14)
# Chunk 17
comp <- data.frame(b[-zerod],coef(regfit.full,14))
colnames(comp) <- (c("Full", "BSS"))
comp
# Chunk 18
my.err <- rep(NA, 20)
x_cols = colnames(my.mat, do.NULL = FALSE, prefix = "x.")
for (i in 1:20) {
coi <- coef(regfit.full, id = i)
my.err[i] <- sqrt(sum((my.res[x_cols %in% names(coi)] - coi[names(coi) %in% x_cols])^2) + sum(my.res[!(x_cols %in% names(coi))])^2)
}
plot(my.err, xlab = "Number of Predictors", ylab = "Coef MSE", pch = 19, type = "b")
# Chunk 19
set.seed(1)
rand.name <- matrix(rnorm(1000), 100, 10)
beta <- matrix(c(rep(1,5), rep(0,5)),10,1)
error <- rnorm(100,0,0.5)
res <- rand.name%*%beta+error
train.prob4 <- data.frame(rand.name, res)
# Chunk 20
set.seed(2)
rand.name2 <- matrix(rnorm(10000), 1000, 10)
beta2 <- matrix(c(rep(1,5), rep(0,5)),10,1)
error2 <- rnorm(1000,0,0.5)
res <- rand.name2%*%beta2+error2
test.prob4 <- data.frame(rand.name2, res)
# Chunk 21
train.mat<-model.matrix(res~.,data=train.prob4)
test.mat<-model.matrix(res~.,data=test.prob4)
grid<-10^seq(10,-2,length=100)
lasso.p4<-glmnet(train.mat,train.prob4$res,alpha=1,lambda=grid)
cv.lasso<-cv.glmnet(train.mat,train.prob4$res,alpha=1,lambda=grid)
bestlam<-cv.lasso$lambda.min
pred.lasso<-predict(lasso.p4,s=bestlam,newx =test.mat)
err.lasso.1 <- mean((test.prob4$res-pred.lasso)^2)
err.lasso.1
# Chunk 22
lasso.coef <- predict(lasso.p4,s=bestlam,type="coefficients")
lasso.coef
lasso.coef[lasso.coef != 0]
# Chunk 23
my.lm <- lm(res~X1+X2+X3+X4+X5+X6+X9, data=train.prob4)
lm.pred <- predict(my.lm, test.prob4)
err.ols.1 <- mean((test.prob4$res-lm.pred)^2)
err.lasso <- vector(mode="numeric", length = 1000)
err.ols <- vector(mode="numeric", length = 1000)
for(i in 1:1000){
rand.name <- matrix(rnorm(1000), 100, 10)
beta <- matrix(c(rep(1,5), rep(0,5)),10,1)
error <- rnorm(100,0,0.5)
res <- rand.name%*%beta+error
train.prob <- data.frame(rand.name, res)
train.mat<-model.matrix(res~.,data=train.prob)
lasso.p4<-glmnet(train.mat,train.prob$res,alpha=1,lambda=grid)
cv.lasso<-cv.glmnet(train.mat,train.prob$res,alpha=1,lambda=grid)
bestlam<-cv.lasso$lambda.min
pred.lasso<-predict(lasso.p4,s=bestlam,newx=test.mat)
err.lasso[i] <- mean((test.prob4$res-pred.lasso)^2)
lasso.coef <- predict(lasso.p4,s=bestlam,type="coefficients")
train.prob[,-c((which(lasso.coef == 0) -2)[-1])]
my.lm <- lm(res~., data=train.prob)
lm.pred <- predict(my.lm, test.prob4)
err.ols[i] <- mean((test.prob4$res-lm.pred)^2)
}
paste("Err Lasso (0.5):", mean(err.lasso))
paste("Err LassoOLS (0.5):", mean(err.ols))
paste("Err Lasso (0.5):", mean(err.lasso))
paste("Err OLS (0.5):", mean(err.ols))
my.vars <- c(0.01, 0.05, 0.25, 0.5, 1, 25, 100)
err.lasso.plot <- vector(mode = "numeric", length(my.vars))
err.ols.plot <- vector(mode = "numeric", length(my.vars))
for(j in 1:length(my.vars)){
err.lasso <- vector(mode = "numeric", 1000)
err.ols <- vector(mode = "numeric", 1000)
for(i in 1:1000){
rand.name <- matrix(rnorm(1000), 100, 10)
beta <- matrix(c(rep(1,5), rep(0,5)),10,1)
error <- rnorm(100,0,0.5)
res <- rand.name%*%beta+error
train.prob <- data.frame(rand.name, res)
rand.name2 <- matrix(rnorm(10000), 1000, 10)
beta2 <- matrix(c(rep(1,5), rep(0,5)),10,1)
error2 <- rnorm(1000,0,0.5)
res <- rand.name2%*%beta2+error2
test.prob4 <- data.frame(rand.name2, res)
train.mat<-model.matrix(res~.,data=train.prob)
test.mat<-model.matrix(res~.,data=test.prob4)
lasso.p4<-glmnet(train.mat,train.prob$res,alpha=1,lambda=grid)
cv.lasso<-cv.glmnet(train.mat,train.prob$res,alpha=1,lambda=grid)
bestlam<-cv.lasso$lambda.min
pred.lasso<-predict(lasso.p4,s=bestlam,newx=test.mat)
err.lasso[i] <- mean((test.prob4$res-pred.lasso)^2)
lasso.coef <- predict(lasso.p4,s=bestlam,type="coefficients")
train.prob[,-c((which(lasso.coef == 0) -2)[-1])]
my.lm <- lm(res~., data=train.prob)
lm.pred <- predict(my.lm, test.prob4)
err.ols[i] <- mean((test.prob4$res-lm.pred)^2)
}
err.lasso.plot[j] <- mean(err.lasso)
err.ols.plot[j] <- mean(err.ols)
}
library(ggplot2)
ggplot() +                    # basic graphical object
geom_line(aes(x=my.vars,y=err.lasso.plot), colour="red") +  # first layer
geom_line(aes(x=my.vars,y=err.ols.plot), colour="green")
